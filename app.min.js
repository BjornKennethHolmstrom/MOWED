/* MOWED (c) 2024 Björn Kenneth Holmström - Custom License */
async function initializePyodide(){let e=await loadPyodide();return await e.loadPackage("scipy"),e}let pyodideReadyPromise=initializePyodide();async function runOptimization(e){let t=await pyodideReadyPromise;await t.runPythonAsync(`
        from scipy.optimize import linprog
        import numpy as np

        def optimize_reforestation(budget, land_area, species_data):
            n_species = len(species_data)
            
            # Objective coefficients (negative because we're maximizing)
            c = [-1 * (species_data[s]['carbon'] + species_data[s]['biodiversity']) for s in species_data]
            
            # Constraint matrix
            A_ub = [
                [species_data[s]['cost'] for s in species_data],  # Budget constraint
                [species_data[s]['area'] for s in species_data]   # Land area constraint
            ]
            
            # Constraint vector
            b_ub = [budget, land_area]
            
            # Bounds for variables (non-negative integers)
            bounds = [(0, None) for _ in range(n_species)]
            
            # Solve the problem
            res = linprog(c, A_ub=A_ub, b_ub=b_ub, bounds=bounds, method='highs', integrality=np.ones(n_species))
            
            # Prepare results
            tree_counts = {s: int(round(res.x[i])) for i, s in enumerate(species_data)}
            objective_value = -res.fun  # Negate because we maximized
            
            print(f"Python: tree_counts = {tree_counts}")  # Debug print
            print(f"Python: objective_value = {objective_value}")  # Debug print
            
            return tree_counts, objective_value

        def calculate_impact(tree_counts, species_data):
            total_carbon = sum(tree_counts[s] * species_data[s]['carbon'] for s in tree_counts)
            total_biodiversity = sum(tree_counts[s] * species_data[s]['biodiversity'] for s in tree_counts)
            total_cost = sum(tree_counts[s] * species_data[s]['cost'] for s in tree_counts)
            total_area = sum(tree_counts[s] * species_data[s]['area'] for s in tree_counts)
            
            impact = {
                'carbon': float(total_carbon),
                'biodiversity': float(total_biodiversity),
                'cost': float(total_cost),
                'area': float(total_area)
            }
            
            print(f"Python: impact = {impact}")  # Debug print
            
            return impact

        # Main optimization function
        def run_optimization(budget, land_area, species_data):
            tree_counts, objective_value = optimize_reforestation(budget, land_area, species_data)
            impact = calculate_impact(tree_counts, species_data)
            return tree_counts, objective_value, impact
    `);let i=t.runPython(`
        tree_counts, objective_value, impact = run_optimization(${e.budget}, ${e.landArea}, ${JSON.stringify(e.species)})
        print(f"Python: Final result = {(tree_counts, objective_value, impact)}")  # Debug print
        (tree_counts, objective_value, impact)
    `);return console.log("JavaScript: Python result:",i.toJs()),i.toJs()}let form,resultsDiv,loadingDiv,addSpeciesButton,speciesInputs,loadExampleButton;function addSpeciesInput(){let e=document.createElement("div");e.className="species-entry",e.innerHTML=`
        <input type="text" placeholder="Species Name" class="species-name" required>
        <input type="number" placeholder="Cost per Tree" class="species-cost" required>
        <input type="number" placeholder="Area per Tree" class="species-area" required>
        <input type="number" placeholder="Carbon Sequestration" class="species-carbon" required>
        <input type="number" placeholder="Biodiversity Score" class="species-biodiversity" required>
        <button type="button" class="remove-species">Remove</button>
    `,document.getElementById("species-inputs").appendChild(e)}function removeSpeciesInput(e){e.target.classList.contains("remove-species")&&e.target.closest(".species-entry").remove()}function loadExampleTemplate(){document.getElementById("species-inputs").innerHTML="",document.getElementById("budget").value=1e4,document.getElementById("land-area").value=5e3,[{name:"Oak",cost:15,area:25,carbon:7,biodiversity:8},{name:"Pine",cost:10,area:20,carbon:6,biodiversity:6},{name:"Maple",cost:18,area:30,carbon:8,biodiversity:7},{name:"Birch",cost:12,area:22,carbon:5,biodiversity:7}].forEach(e=>{addSpeciesInput();let t=document.querySelector(".species-entry:last-child");t.querySelector(".species-name").value=e.name,t.querySelector(".species-cost").value=e.cost,t.querySelector(".species-area").value=e.area,t.querySelector(".species-carbon").value=e.carbon,t.querySelector(".species-biodiversity").value=e.biodiversity})}async function handleFormSubmit(e){e.preventDefault(),loadingDiv.style.display="block",resultsDiv.innerHTML="";let t=document.querySelectorAll(".species-entry"),i={};t.forEach((e,t)=>{let a=e.querySelector(".species-name").value||`Species ${t+1}`;i[a]={cost:parseFloat(e.querySelector(".species-cost").value),area:parseFloat(e.querySelector(".species-area").value),carbon:parseFloat(e.querySelector(".species-carbon").value),biodiversity:parseFloat(e.querySelector(".species-biodiversity").value)}});let a={budget:parseFloat(document.getElementById("budget").value),landArea:parseFloat(document.getElementById("land-area").value),species:i};console.log("JavaScript: Form data:",a);try{let s=await runOptimization(a);if(console.log("JavaScript: Optimization results:",s),!Array.isArray(s)||3!==s.length)throw Error(`Unexpected result format. Expected array of length 3, got: ${JSON.stringify(s)}`);let[o,r,n]=s;if(!(o instanceof Map))throw Error(`Unexpected treeCounts format. Expected Map, got: ${o}`);if(!(n instanceof Map))throw Error(`Unexpected impact format. Expected Map, got: ${n}`);displayResults(o,r,n)}catch(c){console.error("JavaScript: Optimization error:",c),resultsDiv.innerHTML=`<p>Error: ${c.message}</p>`,setTimeout(()=>{resultsDiv.scrollIntoView({behavior:"smooth",block:"start"})},100)}finally{loadingDiv.style.display="none"}}function displayResults(e,t,i){console.log("JavaScript: Displaying results:",{treeCounts:e,objectiveValue:t,impact:i});let a=`
        <h2>Optimization Results:</h2>
        <p>Objective value: ${t?.toFixed(2)??"N/A"}</p>
        <h3>Tree Counts:</h3>
        <ul>
    `;for(let[s,o]of e)a+=`<li>${s}: ${o??"N/A"}</li>`;a+=`
        </ul>
        <h3>Impact:</h3>
        <ul>
            <li>Total Carbon Sequestration: ${i.get("carbon")?.toFixed(2)??"N/A"}</li>
            <li>Total Biodiversity Score: ${i.get("biodiversity")?.toFixed(2)??"N/A"}</li>
            <li>Total Cost: ${i.get("cost")?.toFixed(2)??"N/A"}</li>
            <li>Total Area Used: ${i.get("area")?.toFixed(2)??"N/A"}</li>
        </ul>
    `,resultsDiv.innerHTML=a,setTimeout(()=>{resultsDiv.scrollIntoView({behavior:"smooth",block:"start"})},100)}document.addEventListener("DOMContentLoaded",function(){form=document.getElementById("optimization-form"),resultsDiv=document.getElementById("results"),loadingDiv=document.getElementById("loading"),addSpeciesButton=document.getElementById("add-species"),speciesInputs=document.getElementById("species-inputs"),loadExampleButton=document.getElementById("load-example"),addSpeciesButton.addEventListener("click",addSpeciesInput),speciesInputs.addEventListener("click",removeSpeciesInput),form.addEventListener("submit",handleFormSubmit),loadExampleButton.addEventListener("click",loadExampleTemplate),addSpeciesInput();let e=document.getElementById("show-help"),t=document.getElementById("help-modal"),i=t.querySelector(".close");e.addEventListener("click",function(){t.style.display="block"}),i.addEventListener("click",function(){t.style.display="none"}),window.addEventListener("click",function(e){e.target==t&&(t.style.display="none")})});
